


For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...

(gdb) r ans.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/KCCC/Desktop/computer system1/Assignment 1/bomb002/bomb ans.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
5 12

Breakpoint 1, 0x000000000040107b in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x000000000040107b <+0>:     sub    $0x18,%rsp  // makes stack 
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi // checking the expected answer format
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax  // compre eax with 1 and if its greater than 1 than move to 48
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>  // else explode if is equal or less than 1
   0x00000000004010ab <+48>:    mov    (%rsp),%eax  // moving the rsp value to eax
   0x00000000004010ae <+51>:    and    $0xf,%eax   /// anding the binary of 15 and rsp that extracted from the system
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax   // after moving the data compare f(15) with eax and if it is equal jump to line 109 
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx  // moving 0 to ecx and move 0 to edx 
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx  // adding 1 to rdx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax   // after adding the eax and ecx compare with eax and jump to 72 its 

                                                    // and adding.. its shows iterating it becomes 15.
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) u* 0x00000000004010dd
0x00000000004010dd in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
=> 0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x7ffffffee438      140737488282680
rcx            0x73                115
rdx            0xf                 15
rsi            0x0                 0
rdi            0x7ffffffedcd0      140737488280784
rbp            0x0                 0x0
rsp            0x7ffffffee320      0x7ffffffee320
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x4010dd            0x4010dd <phase_5+98>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0





***************************************************************************************************************************
from above i have concluded that the answer or the input that i have given  is not correct and the pahse is explode if i run continuesly
i have get idea and hint what the system asking me to give an input.
***************************************************************************************************************************







(gdb) r ans.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/KCCC/Desktop/computer system1/Assignment 1/bomb002/bomb ans.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
5 115

Breakpoint 1, 0x000000000040107b in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) u*  0x0000000000401106
main (argc=<optimized out>, argv=<optimized out>) at bomb.c:102
102         phase_defused();
(gdb)





***************************************************************************************************************************
From the above i have concluded that the hint i get and input that i given to the system is correct and 
from this code i have came across with used of loop 
iteration.


/////// The real solution is 5 and 115
*****************************************************

